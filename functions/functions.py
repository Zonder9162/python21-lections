"===========Функции==========="
# функция - именнованный блок кодаб который может принимать аргументы и возвращать результат

def my_sum(a, b):
    return a + b

res = my_sum(5,4)
print(res) # 9

"===========Параметры=========="
# параметры - локальные переменные внутри функцииб значения которым мы задаем при вызове функции (переменные, которые мы указали внутри скобочек при создании функции (когда ниписали def)) 

"===========Виды параметров=========="
# 1. обязательные
# 2. необязательные
# 2.1 по дефолту (со значением по умолчанию)
# 2.2 args
# 2.3 kwargs

"============Аргументы============="
# аргументы - значения, которые мы передаем параметрам при вызове функции
# сначала всегда передаются позиционные потом именнованные

"==========Виды аргументов=========="
# 1. позиционные
# 2. именованные (ключ = значение)

def sum_or_add_10(a, b=10):
    # параметр с дефолтом 10
    return a + b

print(sum_or_add_10(2,3)) # 5
print(sum_or_add_10(5)) # 15
print(sum_or_add_10(2, 9)) # 11
print(sum_or_add_10(15)) # 25

def func(*args, **kwargs):
    """
    args - tuple, в который приходят все аргументы, которые были переданы через запятую (кроме обязательных и по дефолту)

    kwargs - dict, в который нам приходят все аргументы, которые были переданы в виде ключ=значение кроме именованных
    """
    print(args, kwargs)

func(1,2,3,4,5, {'a':5}, a = 3, b = 5)

"=======*========"
# * - знак умножения
# * - распоковка

list_ = [1,2,3,4,5]
list2 = [*list_] # распаковываем значения в списке в новый список

dict_ = {'a':3, 'b':6}
dict2 = {**dict_}
print(dict2) # распаковываем 

